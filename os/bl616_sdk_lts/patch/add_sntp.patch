diff --git a/components/net/lwip/lwip/CMakeLists.txt b/components/net/lwip/lwip/CMakeLists.txt
index 4fbfbbf..4dd8563 100644
--- a/components/net/lwip/lwip/CMakeLists.txt
+++ b/components/net/lwip/lwip/CMakeLists.txt
@@ -9,6 +9,7 @@ sdk_library_add_sources(src/apps/http/fs.c)
 # sdk_library_add_sources(src/apps/http/fsdata_custom.c)
 # sdk_library_add_sources(src/apps/http/fsdata.c)
 # sdk_library_add_sources(src/apps/http/httpd.c)
+sdk_library_add_sources(src/apps/sntp/sntp.c)
 
 sdk_library_add_sources(src/api/api_lib.c)
 sdk_library_add_sources(src/api/api_msg.c)
diff --git a/components/net/lwip/lwip/src/apps/sntp/sntp.c b/components/net/lwip/lwip/src/apps/sntp/sntp.c
index b7ff56a..a958072 100644
--- a/components/net/lwip/lwip/src/apps/sntp/sntp.c
+++ b/components/net/lwip/lwip/src/apps/sntp/sntp.c
@@ -279,6 +279,8 @@ sntp_format_time(s32_t sec)
 }
 #endif /* LWIP_DEBUG && !sntp_format_time */
 
+static uint32_t ntp_sec, ntp_frag, time_obtained;
+
 /**
  * SNTP processing of received timestamp
  */
@@ -324,6 +326,16 @@ sntp_process(const struct sntp_timestamps *timestamps)
 #endif /* SNTP_COMP_ROUNDTRIP */
 
   SNTP_SET_SYSTEM_TIME_NTP(sec, frac);
+
+  taskENTER_CRITICAL();
+  ntp_sec = sec + DIFF_SEC_1970_2036;
+  ntp_frag = frac;
+  time_obtained = xTaskGetTickCount();
+  // if (ntp_time_sync_cb)
+  //   ntp_time_sync_cb();
+  // bl_sys_time_update(((uint64_t)ntp_sec) * 1000 + SNTP_FRAC_TO_US(ntp_frag) / 1000);
+  taskEXIT_CRITICAL();
+
   LWIP_UNUSED_ARG(frac); /* might be unused if only seconds are set */
   LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_process: %s, %" U32_F " us\n",
                                  sntp_format_time(sec), SNTP_FRAC_TO_US(frac)));
@@ -833,6 +845,36 @@ sntp_getserver(u8_t idx)
   return IP_ADDR_ANY;
 }
 
+
+int sntp_get_time(uint32_t *seconds, uint32_t *frags)
+{
+    uint32_t seconds_now, frags_now;
+    int ms_diff;
+
+    taskENTER_CRITICAL();
+
+    if (0 == ntp_sec) {
+        *seconds = 0;
+        *frags = 0;
+    } else {
+        ms_diff = ((int32_t)xTaskGetTickCount()) - ((int32_t)time_obtained);
+
+        seconds_now = ntp_sec;
+        frags_now = ntp_frag / 1000;
+
+        seconds_now += (ms_diff / 1000);
+        frags_now += (ms_diff % 1000);
+
+        *seconds = seconds_now;
+        *frags = frags_now;
+    }
+
+    taskEXIT_CRITICAL();
+    return 0;
+}
+
+
+
 #if SNTP_SERVER_DNS
 /**
  * Initialize one of the NTP servers by name
